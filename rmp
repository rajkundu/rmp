#!/usr/bin/python3

import sys
import argparse
import json
import urllib3

class bcolors:
    HEADER = '\033[95m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

#Command-Line Arguments
parser = argparse.ArgumentParser()
parser.add_argument("name", type = str, help = "Instructor's Name")
parser.add_argument('-w', "--web", dest = "openWebpage", action='store_true', help = "Opens instructor webpage")
parser.add_argument('-b', "--basic", dest = "basicMode", action='store_true', help = "Retrieves only basic information (faster, doesn't parse instructor's webpage for average difficulty rating)")
parser.add_argument("-s", "--school", dest = "schoolID", type = int, default = 1350, help="RMP School ID Number")
clArgs = parser.parse_args()

queryUrl = "https://solr-aws-elb-production.ratemyprofessors.com//solr/rmp/select/?solrformat=true&rows=20&wt=json&json.wrf=noCB&callback=noCB&defType=edismax&qf=teacherfirstname_t%5E2000+teacherlastname_t%5E2000+teacherfullname_t%5E2000+autosuggest&bf=pow(total_number_of_ratings_i%2C2.1)&sort=total_number_of_ratings_i+desc&siteName=rmp&rows=20&start=0&fl=pk_id+teacherfirstname_t+teacherlastname_t+total_number_of_ratings_i+averageratingscore_rf+schoolid_s&q=" + clArgs.name + "+AND+schoolid_s%3A" + str(clArgs.schoolID) + "&fq="
rawResponse = urllib3.PoolManager().request("GET", queryUrl).data.decode('utf-8')[5:-1]
jsonResponse = json.loads(rawResponse)

#Quit program if no result found
if(jsonResponse["response"]["numFound"] == 0):
    print(bcolors.FAIL + bcolors.BOLD + "ERROR:" + bcolors.ENDC + " No results found for instructor \"" + bcolors.WARNING + ("%s" % clArgs.name) + bcolors.ENDC + "\" at School #" + bcolors.WARNING + ("%d" % clArgs.schoolID) + bcolors.ENDC)
    sys.exit()

pkID = jsonResponse["response"]["docs"][0]["pk_id"]
webpageURL = "https://www.ratemyprofessors.com/ShowRatings.jsp?tid=" + str(pkID)

if(clArgs.openWebpage):
    import webbrowser
    webbrowser.open_new_tab(webpageURL)
    sys.exit()

firstName = jsonResponse["response"]["docs"][0]["teacherfirstname_t"]
lastName = jsonResponse["response"]["docs"][0]["teacherlastname_t"]
avgRating = jsonResponse["response"]["docs"][0]["averageratingscore_rf"]
numRatings = jsonResponse["response"]["docs"][0]["total_number_of_ratings_i"]

#Note: This parsing method relies on the ordering of ".grade" elements on RMP's webpage, so it may not work in the future
if(~clArgs.basicMode):
    from bs4 import BeautifulSoup
    import re
    soup = BeautifulSoup(urllib3.PoolManager().request("GET", webpageURL).data, features="lxml")
    difficultyRating = float(soup.find_all('div', attrs = {"class": "grade"})[2].text.strip())

colorCodeRatingScale = [0.0, 2.75, 3.75, 5.0]
def colorCodeRating(rating):
    if(rating < colorCodeRatingScale[1]):
        return bcolors.FAIL
    elif(rating < colorCodeRatingScale[2]):
        return bcolors.WARNING
    else:
        return bcolors.OKGREEN

colorCodeDifficultyScale = [0.0, 2.5, 3.75, 5.0]
def colorCodeDifficulty(rating):
    if(rating > colorCodeDifficultyScale[2]):
        return bcolors.FAIL
    elif(rating > colorCodeDifficultyScale[1]):
        return bcolors.WARNING
    else:
        return bcolors.OKGREEN

print("PK ID:\t\t\t%d" % (pkID))
print("Full Name:\t\t%s %s" % (firstName, lastName))
print("# Ratings:\t\t%d" % numRatings)
print("Avg. Rating:\t\t" + colorCodeRating(avgRating) + "%.1f" % avgRating + bcolors.ENDC)
if(~clArgs.basicMode):
    print("Avg. Difficulty:\t" + colorCodeDifficulty(difficultyRating) + "%.1f" % difficultyRating + bcolors.ENDC)
